{
  "1": {
    "title": "Переменные, print(), типы данных",
    "description": "Основы работы с данными в Python",
    "image": "4.jpg",
    "lessons": {
      "1": {
        "title": "Основы переменных",
        "content": "В Python переменные создаются простым присваиванием. Например: <code>x = 5</code>. Тип данных определяется автоматически. Переменные могут содержать буквы, цифры (но не начинаться с цифры) и символ подчеркивания.",
        "image": "variables_lesson.jpg",
        "tasks": [
          {
            "question": "Как правильно объявить переменную?",
            "options": ["var x = 5", "x := 5", "x = 5", "let x = 5"],
            "correct": 2
          }
        ]
      }
    }
  },
  "2": {
    "title": "Условный оператор if",
    "description": "Логические ветвления программы",
    "image": "5.jpg",
    "lessons": {
      "1": {
        "title": "Базовый синтаксис if",
        "content": "Условный оператор if позволяет выполнять код только при выполнении определённого условия:\n<code>if условие:\n    выполнить_этот_код</code>",
        "tasks": [
          {
            "question": "Какой синтаксис правильный?",
            "options": ["if (x > 5)", "if x > 5:", "if x > 5 then", "if: x > 5"],
            "correct": 1
          }
        ]
      }
    }
  },
  "3": {
    "title": "Каскадный оператор elif, else",
    "description": "Множественные условия",
    "image": "6.jpg",
    "lessons": {
      "1": {
        "title": "Множественные условия",
        "content": "Конструкция if-elif-else позволяет обрабатывать несколько условий:\n<code>if x > 10:\n    print('Больше 10')\nelif x > 5:\n    print('Больше 5')\nelse:\n    print('Меньше или равно 5')</code>",
        "tasks": [
          {
            "question": "Сколько блоков elif можно использовать?",
            "options": ["Не более 3", "Не более 10", "Любое количество", "Только 1"],
            "correct": 2
          }
        ]
      }
    }
  },
  "4": {
    "title": "Цикл for",
    "description": "Итерация по последовательностям",
    "image": "7.jpg",
    "lessons": {
      "1": {
        "title": "Итерация по элементам",
        "content": "Цикл for используется для перебора элементов последовательности:\n<code>for item in [1, 2, 3]:\n    print(item)</code>\n\nФункция range() создаёт последовательность чисел:\n<code>for i in range(5):\n    print(i)</code>",
        "tasks": [
          {
            "question": "Как создать цикл от 1 до 5?",
            "options": ["for x in 1-5", "for x in range(1,5)", "for x in range(1,6)", "for x in [1,2,3,4,5]"],
            "correct": 2
          }
        ]
      }
    }
  },
  "5": {
    "title": "Цикл while",
    "description": "Циклы с условием",
    "image": "8.jpg",
    "lessons": {
      "1": {
        "title": "Цикл с условием",
        "content": "Цикл while выполняет код, пока условие истинно:\n<code>i = 0\nwhile i < 5:\n    print(i)\n    i += 1</code>\n\nВажно следить за условием выхода, чтобы избежать бесконечного цикла.",
        "tasks": [
          {
            "question": "Как остановить бесконечный цикл?",
            "options": ["Командой stop", "Ctrl+C", "Командой break в коде", "Закрыть программу"],
            "correct": 1
          }
        ]
      }
    }
  },
  "6": {
    "title": "Вложенные циклы",
    "description": "Циклы внутри циклов",
    "image": "9.jpg",
    "lessons": {
      "1": {
        "title": "Циклы в циклах",
        "content": "Вложенные циклы используются для обработки многомерных структур:\n<code>for i in range(3):\n    for j in range(3):\n        print(i, j)</code>\n\nСложность алгоритма увеличивается экспоненциально с каждым уровнем вложенности.",
        "tasks": [
          {
            "question": "Сколько итераций будет во вложенных циклах range(3) и range(4)?",
            "options": ["7", "12", "9", "16"],
            "correct": 1
          }
        ]
      }
    }
  },
  "7": {
    "title": "Строки (индексация, срезы, методы)",
    "description": "Работа с текстовыми данными",
    "image": "10.jpg",
    "lessons": {
      "1": {
        "title": "Операции со строками",
        "content": "Строки в Python - неизменяемые последовательности символов:\n<code>s = 'Hello'\nprint(s[1])  # 'e'\nprint(s[1:4])  # 'ell'\nprint(s.upper())  # 'HELLO'</code>",
        "tasks": [
          {
            "question": "Как получить последний символ строки?",
            "options": ["s[-1]", "s[last]", "s[len(s)]", "s.end()"],
            "correct": 0
          }
        ]
      }
    }
  },
  "8": {
    "title": "Списки",
    "description": "Коллекции элементов",
    "image": "11.jpg",
    "lessons": {
      "1": {
        "title": "Работа со списками",
        "content": "Списки - изменяемые последовательности:\n<code>lst = [1, 2, 3]\nlst.append(4)\nlst.remove(2)\nprint(lst[0])  # 1</code>\n\nМетоды: append(), remove(), pop(), sort(), reverse() и другие.",
        "tasks": [
          {
            "question": "Как добавить элемент в конец списка?",
            "options": ["lst.insert(end, x)", "lst += x", "lst.append(x)", "lst.add(x)"],
            "correct": 2
          }
        ]
      }
    }
  },
  "9": {
    "title": "Функции",
    "description": "Создание повторно используемого кода",
    "image": "12.jpg",
    "lessons": {
      "1": {
        "title": "Определение функций",
        "content": "Функции создаются с помощью def:\n<code>def greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Alice'))</code>\n\nФункции могут принимать аргументы и возвращать значения.",
        "tasks": [
          {
            "question": "Как объявить функцию без аргументов?",
            "options": ["function foo:", "def foo():", "def foo:", "foo():"],
            "correct": 1
          }
        ]
      }
    }
  }
}
